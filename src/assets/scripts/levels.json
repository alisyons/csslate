{
  "levels": [
    {
      "name": "Default Level",
      "chapter": 1,
      "number": 0,
      "person": "",
      "dialogue": "",
      "description": "",
      "solution": "",
      "htmlSnippets": [
        ""
      ],
      "cssSnippets": [
        ""
      ]
    },
    {
      "name": "Your first note",
      "chapter": 1,
      "number": 1,
      "person": "Alex",
      "dialogue": "Someone put my note on the board. But my favourite color is black!",
      "solution": "background-color:black",
      "description": "On the left, you see a board. So far, there is only one note pinned on it. Your job is to hang notes on it, or change existing ones, according to people's wishes.<br><br>As you can see, Alex wants a note in black. Each note has attributes, such as <b>height, width and background color</b>, as seen in the class <b>'post-it'</b>.<br><br>There is also the class <b>alex</b>. Any changes you declare in that class will only apply to the note that class is attached to.<br><br>So now, go ahead and change the attribute <b>background-color</b> of Alex' note to <b>black</b>!",
      "htmlSnippets": [
        "<div class=\"post-it alex\">",
        "This is Alex' note.",
        "</div>",
        "<div class=\"post-it bea\">",
        "This is Bea's note.",
        "</div>"
      ],
      "cssSnippets": [
        ".post-it {",
        "background-color: #0288D1;",
        "width: 200px;",
        "height: 200px;",
        "}",
        " ",
        " ",
        ".alex {",
        "}"
      ]
    },
    {
      "name": "Widths and heights",
      "chapter": 1,
      "number": 2,
      "person": "Alex",
      "dialogue": "I'm not a fan of squares!",
      "solution": "background-color:black",
      "description": "Not every element has to fit the predetermined attributes. Feel free to change the height or width of Alex' note!<br><br>However, be cautious: every width and height needs a <b>unit</b>. These can be <b>pixels (1px), percent (1%), relative to root font size (1rem)</b>, and many others. And don't worry about breaking the website, it will all turn back to normal in the next level.",
      "htmlSnippets": [
        "<div class=\"post-it alex\">",
        "This is Alex' note.",
        "</div>"
      ],
      "cssSnippets": [
        ".post-it {",
        "background-color: #0288D1;",
        "width: 200px;",
        "height: 200px;",
        "}",
        " ",
        " ",
        ".alex {",
        "background-color: black;",
        "}"
      ]
    },
    {
      "name": "Working with a second note",
      "chapter": 1,
      "number": 3,
      "person": "Bea",
      "dialogue": "My cat has gone missing! Please help me put a note about it on the board! It's urgent and requires all attention!",
      "solution": "position:absolute",
      "description": "Suddenly, we are in need of a second note. Thus, we need a second <b>div</b> dedicated to Bea. Let us give it the class <b>bea</b>.<br><br>Now, we have to set a <b>position</b>. A <b>relative</b> position doesn't change the general layout of the page, while an <b>absolute</b> position places itself according to the parent's position (which in this case is the container of the post-its). Now, how can we force everyone to look at Bea's note first?<br><br>Fun fact: every element's default position is <b>static</b>. It is positioned according to the flow.",
      "htmlSnippets": [
        "<div class=\"post-it alex\">",
        "This is Alex' note.",
        "</div>",
        "<div class=\"post-it bea\">",
        "Cat missing! Please contact me: 123/XXXXX",
        "</div>"
      ],
      "cssSnippets": [
        ".post-it {",
        "background-color: #0288D1;",
        "width: 200px;",
        "height: 200px;",
        "}",
        " ",
        ".alex {",
        "background-color: black;",
        "}",
        " ",
        ".bea {",
        "top: 10rem;",
        "left: 5rem;",
        "}"
      ]
    },
    {
      "name": "Hide and Seek",
      "chapter": 1,
      "number": 4,
      "person": "Charlie",
      "dialogue": "Someone put this embarassing note on the board! Please make it disappear!",
      "description": "How and if a note is shown is handled by the <b>display</b> attribute. In this chapter, you are introduced to the values <b>inline, block</b> and <b>none</b>.<br><br>You will get to know them in detail in the next chapter, so in the meantime, let's make it disappear. As your guess, which one of the display values can make a note go away?<br><br>You will find yourself having a hard time overriding the note's default display property (which will be <b>block</b>, since it's a <b>div element</b>), so have to overpower it by attaching <b>!important</b> to your solution. However, in practical use, you should use <b>!important</b> only if nothing else works.",
      "solution": "display:none",
      "htmlSnippets": [
        "<div class=\"post-it charlie\">",
        "I'm Charlie and I'm stupid!",
        "</div>"
      ],
      "cssSnippets": [
        ".post-it {",
        "background-color: #0288D1;",
        "width: 200px;",
        "height: 200px;",
        "}"
      ]
    },
    {
      "name": "Falling in Line",
      "chapter": 1,
      "number": 5,
      "person": "Charlie",
      "dialogue": "I just wanted to say hello and now it's unreadable!",
      "description": "When you look at the HTML code, every letter is nested in its own <b>p</b> element. Usually <b>p</b> elements (as in 'paragraph') have the default of <b>display: block</b>. <br><br>This means that this element will always start a new line and extend to the full width of the note. Now, if you think back, there was a different keyword that makes sure that those elements do not start a new line.<br><br>Now, what does that selector mean? That <b>.charlie p</b>? This means that it selects every <b>p</b> element that is inside the element with the <b>charlie</b> class. Selectors with dots before them signify class selectors, while no dot means element selector.",
      "solution": "display:inline",
      "htmlSnippets": [
        "<div class=\"post-it charlie\">",
        "<p>H</p>",
        "<p>e</p>",
        "<p>l</p>",
        "<p>l</p>",
        "<p>o</p>",
        "</div>"
      ],
      "cssSnippets": [
        ".post-it {",
        "background-color: #0288D1;",
        "width: 200px;",
        "height: 200px;",
        "}",
        ".charlie p {",
        "}"
      ]
    },
    {
      "name": "Margins and paddings",
      "chapter": 2,
      "number": 1,
      "person": "Dora",
      "dialogue": "Make space! ... somehow.",
      "description": "Congrats, you've mastered the basics of CSS! But there are more shores to explore.<br><br>For the first level of the intermediate chapter, we will explore <b>margins</b> and <b>paddings</b>. Sometimes, you need to make space for your note, be it IN or OUTSIDE it. A <b>margin</b> shoves every other note outside it by some amount, while a padding pushes everything inside the note by that amount. Boths margin and padding can be set in every direction, as well as defined for one specific side (e. g. <b>padding-left</b>).<br><br>Feel free to play around with it. Again, this level has no concrete solution, so you can proceed whenever you want.<br><br><b>Note:</b> Post-Its have a predetermined padding that isn't shown in the code. To override it, please use <b>!important</b>.",
      "solution": "solution",
      "htmlSnippets": [
        "<div class=\"post-it\">",
        "Alex' note!",
        "</div>",
        "<div class=\"post-it\">",
        "Bea's note!",
        "</div>",
        "<div class=\"post-it\">",
        "Charlie's note!",
        "</div>",
        "<div class=\"post-it\">",
        "Dora's note!",
        "</div>"
      ],
      "cssSnippets": [
        ".post-it {",
        "background-color: #0288D1;",
        "width: 200px;",
        "height: 200px;",
        "}"
      ]
    },
    {
      "name": "Fight for Dominance",
      "chapter": 2,
      "number": 2,
      "person": "Alex",
      "dialogue": "That Bea! She really put her note over mine! I'm gonna show her...",
      "description": "Hey, this looks familiar... That's the board from level 3 in chapter 1.<br><br>Changing the \"layering\" of elements is no big deal, since every element has its own <b>z-index</b>. Imagine onion layers, and every layer has its own number. An item with z-index of 3 will be always shown above an item with z-index 2.<br><br>The default <b>z-index</b> value is <b>auto</b>. It means that elements without z-index do not begin a new stacking context and are exempt from future z-index stacks.",
      "solution": "z-index:",
      "htmlSnippets": [
        "<div class=\"post-it alex\">",
        "This is Alex' note.",
        "</div>",
        "<div class=\"post-it bea\">",
        "Cat missing! Please contact me: 123/XXXXX",
        "</div>"
      ],
      "cssSnippets": [
        ".post-it {",
        "background-color: #0288D1;",
        "width: 200px;",
        "height: 200px;",
        "}",
        ".bea {",
        "position: absolute;",
        "z-index: 2;",
        "}",
        " ",
        ".alex {",
        "background-color: black !important;",
        "}"
      ]
    },
    {
      "name": "Floaty friends",
      "chapter": 2,
      "number": 3,
      "person": "Bea",
      "dialogue": "I want this emoji to be aligned on the right!",
      "description": "Similar to Word, CSS can also align items within texts. You can order an element to be <b>left or right</b> of text, with <b>float</b>. With this, you can move an element without necessarily changing the entire structure of your board.",
      "solution": "float:right",
      "htmlSnippets": [
        "<div class=\"post-it alex\">",
        "<p>",
        "<span class=\"emoji\">\uD83D\uDE08</span>",
        "My note!",
        "</p>",
        "</div>"
      ],
      "cssSnippets": [
        ".post-it {",
        "background-color: #0288D1;",
        "width: 200px;",
        "height: 200px;",
        "}",
        ".alex {",
        "background-color: black;",
        "}",
        ".emoji {",
        "}"
      ]
    },
    {
      "name": "A bit of magic",
      "chapter": 2,
      "number": 4,
      "person": "Alex",
      "dialogue": "I heard there's this magical thing called \"hover\"... What if my post-it turns purple upon hovering...",
      "description": "Where do these <b>hover</b> effects come from that we see all the time? It's quite simple, in fact. In CSS there are so-called \"pseudo-selectors\". They are appended to the class name with <b>:</b>, such as alex<b>:hover</b>.<br><br>They require a new declaration (you will see that in the template). Try it out!<br><br>If you're looking for a purple hexcode, try this one: <b>#C3B1E1</b>.",
      "solution": "background-color:#C3B1E1",
      "htmlSnippets": [
        "<div class=\"post-it alex\">",
        "<p>",
        "<span class=\"emoji\">\uD83D\uDE08</span>",
        "My note!",
        "</p>",
        "</div>"
      ],
      "cssSnippets": [
        ".post-it {",
        "background-color: #0288D1;",
        "width: 200px;",
        "height: 200px;",
        "}",
        ".alex {",
        "background-color: black;",
        "}",
        ".alex:hover {",
        "}"
      ]
    },
    {
      "name": "Extra wishes",
      "chapter": 2,
      "number": 5,
      "person": "Ellie",
      "dialogue": "My post-it looks super bleak! I want it to have a little footer...",
      "description": "<img class=\"graphic\" src=\"assets/graphic.png\"> This one is a little more complicated, and it's the last level of chapter 2. By giving a note <b>an absolute positioning</b>, you can manipulate its placing within its parent. To do that, the parent requires <b>a relative positioning</b>, so that its content still stays within its bounds.<br><br>You can set <b>top, left, bottom and right</b> properties for an item. Try to figure out how to position the child at the bottom!",
      "solution": "position:absolute;bottom:0;right:0;left:0",
      "htmlSnippets": [
        "<div class=\"post-it ellie\">",
        "Math tutor needed!",
        "  <div class=\"post-it-footer\">",
        "ellie@mail.com",
        "  </div>",
        "</div>"
      ],
      "cssSnippets": [
        ".post-it {",
        "background-color: #0288D1;",
        "width: 200px;",
        "height: 200px;",
        "position: relative;",
        "}",
        ".post-it-footer {",
        "font-size: 1rem;",
        "background-color: #BF5F82;",
        "padding: 1rem;",
        "}"
      ]
    },
    {
      "name": "How many children?",
      "chapter": 3,
      "number": 1,
      "person": "Ellie",
      "dialogue": "This needs more variety! Let's make every second note pink or something...",
      "description": "Congratulations to passing chapter 2, or welcome if you're only here to refresh some of your knowledge. The training wheels can come off now, and occasionally you get to code much more on your own.<br><br>Let's begin with a simple task, and let's go back to the pseudo-selectors. There are ways to select every n-th, even or odd child inside a parent element.<br><br>The syntax has been provided for you this time, but you oughta remember how it works.<br><br><b>Note:</b> Even though it seems counter-intuitive, you have to attach the pseudo-selector to the child elements, in this case post-its instead of the board.",
      "solution": "",
      "htmlSnippets": [
        "<div class=\"post-it\">",
        "Alex' note!",
        "</div>",
        "<div class=\"post-it\">",
        "Bea's note!",
        "</div>",
        "<div class=\"post-it\">",
        "Charlie's note!",
        "</div>",
        "<div class=\"post-it\">",
        "Dora's note!",
        "</div>"
      ],
      "cssSnippets": [
        ".post-it {",
        "background-color: #0288D1;",
        "width: 200px;",
        "height: 200px;",
        "}",
        ".post-it:nth-child(even) {",
        "}"
      ]
    },
    {
      "name": "Flexing some boxes",
      "chapter": 3,
      "number": 2,
      "person": "Fred",
      "dialogue": "Hey hey, lemme teach you a little trick about centering things...",
      "description": "We've all been there, we have this pretty little element and we simply want it to stay in the center. But we also want it to stay dynamic. If you want a responsive centering of elements, you can use <b>flexbox</b> to your advantage. Flexbox is a way to display your elements, and it stretches containers to the available width/height. What it also does, is align them vertically and horizontally.<br><br>Declaring <b>display: flex</b> should be done in the parent component (in our case, the note). Then, you can use its alignment properties <b>justify-content</b> and <b>align-items</b>.",
      "solution": "display:flex;\njustify-content:center;\nalign-items:center;",
      "htmlSnippets": [
        "<div class=\"post-it\">",
        "<p>CENTER</p>",
        "</div>"
      ],
      "cssSnippets": [
        ".post-it {",
        "background-color: #0288D1;",
        "width: 200px;",
        "height: 200px;",
        "}"
      ]
    },
    {
      "name": "Beyond the border",
      "chapter": 3,
      "number": 3,
      "person": "Dora",
      "dialogue": "I want my note to look exactly like the image below.",
      "description": "<img class=\"graphic\" src=\"assets/dora.png\"> This is your proof of understanding padding and margin. We are adding the border, an immediate stroke around your element. It has three properties: <b>border width (in pixels etc.), border color (a hexcode or color name)</b> and <b>kind of border</b> (usually, you want a solid border, but dotted, dashed and many more borders are also available).",
      "solution": "",
      "htmlSnippets": [
        "<div class=\"post-it alex\">",
        "Alex' note!",
        "</div>",
        "<div class=\"post-it dora\">",
        "Dora's note!",
        "</div>"
      ],
      "cssSnippets": [
        ".post-it {",
        "background-color: #0288D1;",
        "width: 200px;",
        "height: 200px;",
        "}",
        ".dora {",
        ""
      ]
    },
    {
      "name": "A hundred percent",
      "chapter": 3,
      "number": 4,
      "person": "Ellie",
      "dialogue": "I want the most massive biggest note that ever was!",
      "description": "Now we will explore the parent element and child element interactions when it comes to width. For this exercise, you are free to experiment with several things.<br><br>Ellie wants THE most massive note, so it needs to have the width equal to 100%. This will always relate to the parent width. But also, you can try and see how setting the width of the <b>p</b> element to a lesser percentage will change its width compared to the parent. To your convenience, it will have a background color set in the background.",
      "solution": "No solution",
      "htmlSnippets": [
        "<div class=\"post-it ellie\">",
        "<p class=\"ellie-text\">Bloop</p>",
        "</div>"
      ],
      "cssSnippets": [
        ""
      ]
    },
    {
      "name": "The Final Challenge",
      "chapter": 3,
      "number": 5,
      "person": "The Creator",
      "dialogue": "This shall be your final test. Do not disappoint me, or else...",
      "description": "You have learned a lot of things through this game. Now you get to put your knowledge to the test.",
      "solution": "No solution",
      "htmlSnippets": [
        "<div class=\"post-it ellie\">",
        "<p class=\"ellie-text\">Bloop</p>",
        "</div>"
      ],
      "cssSnippets": [
        ""
      ]
    }
  ]
}
